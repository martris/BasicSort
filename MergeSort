public class MergeSort {
    public static void mergeSort(int[] arr) {
        if (arr == null || arr.length < 2) {
            return;
        }
        process(arr, 0, arr.length - 1);
    }

    public static void process(int[] arr, int L, int R) {
        // 二分+递归+归并流程
// 忘记写了递归初始条件。。。。
        if (L == R) {
            return;
        }
        int mid = L + ((R - L) >> 1);//进位操作记得加括号！！
        process(arr, L, mid);
        process(arr, mid + 1, R);
        merge(arr, L, mid, R);
    }

    public static void merge(int[] arr, int L, int mid, int R) {
        int[] help = new int[R - L + 1];
        int i = 0;
        int p1 = L;
        int p2 = mid + 1;
        while (p1 <= mid && p2 <= R) {
            help[i++] = arr[p1] <= arr[p2] ? arr[p1++] : arr[p2++];
        }
        while (p1 <= mid) {
            help[i++] = arr[p1++];
        }
        while (p2 <= R) {
            help[i++] = arr[p2++];
        }
        for (int j = 0; j <= R - L; ++j) {
//                arr[j] = help[j]; 此处未考虑arr从L开始
            arr[L + j] = help[j];
        }
    }

    public static void main(String[] args) {
        int[] arr = {9, 8, 9, 7, 5, 6, 4, 55, 32, 1, 14, 88, 156, 14741};
        mergeSort(arr);
        for (int i : arr) {
            System.out.println(i);
        }
    }
}
